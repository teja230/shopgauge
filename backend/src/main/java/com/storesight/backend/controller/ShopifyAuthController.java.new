package com.storesight.backend.controller;

import com.storesight.backend.model.Shop;
import com.storesight.backend.repository.ShopRepository;
import com.storesight.backend.service.NotificationService;
import com.storesight.backend.service.ShopService;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;
import java.util.Map;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.http.ContentDisposition;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

@RestController
@RequestMapping("/api/auth/shopify")
public class ShopifyAuthController {
    private final WebClient webClient;
    private final ShopService shopService;
    private final NotificationService notificationService;
    private final StringRedisTemplate redisTemplate;
    private final ShopRepository shopRepository;

    @Value("${shopify.api.key}")
    private String apiKey;

    @Value("${shopify.api.secret}")
    private String apiSecret;

    @Value("${shopify.api.scopes}")
    private String scopes;

    @Value("${shopify.api.redirect.uri}")
    private String redirectUri;

    @Autowired
    public ShopifyAuthController(
            WebClient.Builder webClientBuilder,
            ShopService shopService,
            NotificationService notificationService,
            StringRedisTemplate redisTemplate,
            ShopRepository shopRepository) {
        this.webClient = webClientBuilder.build();
        this.shopService = shopService;
        this.notificationService = notificationService;
        this.redisTemplate = redisTemplate;
        this.shopRepository = shopRepository;
    }

    @GetMapping("/install")
    public void install(@RequestParam String shop, HttpServletResponse response) throws IOException {
        String state = generateState();
        String url =
                "https://"
                        + shop
                        + "/admin/oauth/authorize?client_id="
                        + apiKey
                        + "&scope="
                        + scopes
                        + "&redirect_uri="
                        + redirectUri
                        + "&state="
                        + state;
        response.sendRedirect(url);
    }

    @GetMapping("/callback")
    public void handleCallback(
            @RequestParam Map<String, String> params,
            HttpServletResponse response,
            HttpServletRequest request)
            throws IOException {
        String shop = params.get("shop");
        String code = params.get("code");
        System.out.println("Callback received - shop: " + shop + ", code: " + code);
        if (shop == null || code == null) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Missing required parameters");
            return;
        }
        try {
            String accessToken = exchangeCodeForAccessToken(shop, code);
            System.out.println("Access token obtained: " + accessToken);
            shopService.saveShop(shop, accessToken);
            
            // Set cookie with proper attributes for development
            Cookie shopCookie = new Cookie("shop", shop);
            shopCookie.setPath("/");
            shopCookie.setMaxAge((int) java.time.Duration.ofDays(30).getSeconds());
            shopCookie.setHttpOnly(true);
            shopCookie.setSecure(false); // Set to false for localhost
            shopCookie.setDomain("localhost");
            response.addCookie(shopCookie);
            
            System.out.println("Setting cookie: " + shopCookie);
            response.sendRedirect("http://localhost:5173/dashboard");
        } catch (Exception e) {
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error in callback");
        }
    }

    private String generateState() {
        return Base64.getEncoder().encodeToString("state".getBytes());
    }

    private String exchangeCodeForAccessToken(String shop, String code) {
        String url = "https://" + shop + "/admin/oauth/access_token";
        Map<String, String> body = Map.of("client_id", apiKey, "client_secret", apiSecret, "code", code);
        return webClient
                .post()
                .uri(url)
                .bodyValue(body)
                .retrieve()
                .bodyToMono(Map.class)
                .map(response -> (String) response.get("access_token"))
                .block();
    }

    @GetMapping("/export")
    public Mono<ResponseEntity<byte[]>> exportData(
            @CookieValue(value = "shop", required = false) String shop,
            @RequestParam(required = false) String type) {
        if (shop == null) {
            return Mono.just(ResponseEntity.status(HttpStatus.UNAUTHORIZED).build());
        }
        String token = shopService.getTokenForShop(shop);
        if (token == null) {
            return Mono.just(ResponseEntity.status(HttpStatus.UNAUTHORIZED).build());
        }

        String url = "https://" + shop + "/admin/api/2023-10/";
        if ("products".equals(type)) {
            url += "products.json";
        } else if ("orders".equals(type)) {
            url += "orders.json?status=any";
        } else {
            return Mono.just(ResponseEntity.badRequest().build());
        }

        return webClient
                .get()
                .uri(url)
                .header("X-Shopify-Access-Token", token)
                .retrieve()
                .bodyToMono(String.class)
                .map(
                        data -> {
                            String filename = type + "_" + LocalDate.now() + ".json";
                            return ResponseEntity.ok()
                                    .contentType(MediaType.APPLICATION_JSON)
                                    .header(
                                            HttpHeaders.CONTENT_DISPOSITION,
                                            ContentDisposition.attachment()
                                                    .filename(filename)
                                                    .build()
                                                    .toString())
                                    .body(data.getBytes());
                        });
    }

    @GetMapping("/notifications")
    public Mono<ResponseEntity<Map<String, Object>>> getNotifications(
            @CookieValue(value = "shop", required = false) String shop) {
        if (shop == null) {
            return Mono.just(ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(Map.of("error", "Not authenticated")));
        }
        return notificationService.getNotifications(shop)
                .map(notifications -> ResponseEntity.ok(Map.of("notifications", notifications)))
                .onErrorResume(e -> Mono.just(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body(Map.of("error", "Failed to fetch notifications"))));
    }

    @PostMapping("/notifications/mark-read")
    public Mono<ResponseEntity<Map<String, String>>> markNotificationAsRead(
            @CookieValue(value = "shop", required = false) String shop,
            @RequestBody Map<String, String> body) {
        if (shop == null) {
            return Mono.just(ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(Map.of("error", "Not authenticated")));
        }
        String notificationId = body.get("id");
        if (notificationId == null) {
            return Mono.just(ResponseEntity.badRequest()
                    .body(Map.of("error", "Notification ID is required")));
        }
        return notificationService.markAsRead(shop, notificationId)
                .then(Mono.just(ResponseEntity.ok(Map.of("status", "success"))))
                .onErrorResume(e -> Mono.just(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body(Map.of("error", "Failed to mark notification as read"))));
    }
} 